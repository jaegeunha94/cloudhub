app  = "tickscript"
id = "predict-task"
template = """
{{ define "main"}}
// This script is generated by CloudHub application, Do not edit!
// If you edit this script for test, it will be overwritten in the next generation.

var name = '__Anomaly Prediction {{.OrgName}}__'

var db = '{{.OrgName}}'

var rp = '{{.RetentionPolicy}}'

var predict_mode = '{{.PredictMode}}'

var ensemble_condition = '{{.PredictModeCondition}}'

var message = '{{.Message}}'

var details = '{{.Details}}'

var trffic = stream
    |from()
        .database(db)
        .retentionPolicy(rp)
        .measurement('snmp_nx')
        .groupBy(['agent_host', 'sys_name'])
        .where(lambda: isPresent("ifIndex"))
        
var tffUsed = trffic
        .where(lambda: ("ifDescr" =~ /Ethernet/))

var cpuUsed = stream
    |from()
        .database(db)
        .retentionPolicy('autogen')
        .measurement('snmp_nx')
        .groupBy(['agent_host', 'sys_name'])
        .where(lambda: isPresent("cpu1min"))
    |eval(lambda: "cpu1min")
        .as('cpu_used')

var inOctets = tffUsed
    |sum('ifHCInOctets')
        .as('total_ifHCInOctets')
    |derivative('total_ifHCInOctets')
        .unit(1s)
        .nonNegative()

var outOctets = tffUsed
    |sum('ifHCOutOctets')
        .as('total_ifHCOutOctets')
    |derivative('total_ifHCOutOctets')
        .unit(1s)
        .nonNegative()

var inErrors = tffUsed
    |sum('ifInErrors')
        .as('total_ifInErrors')
    |derivative('total_ifInErrors')
        .unit(1s)
        .nonNegative()        

var outErrors = tffUsed
    |sum('ifOutErrors')
        .as('total_ifOutErrors')
    |derivative('total_ifOutErrors')
        .unit(1s)
        .nonNegative()

var joined = inOctets
    |join(outOctets)
        .as('in', 'out')
        .tolerance(1s)

var tffVolume = joined
    |eval(lambda: "in.total_ifHCInOctets" + "out.total_ifHCOutOctets")
        .as('total_traffic')

var predictData = cpuUsed
    |join(tffVolume, inErrors, outErrors)
        .as('cpu', 'traffic', 'inErrors', 'outErrors')
        .tolerance(1s)
    |eval(lambda: "cpu.cpu_used", lambda: "traffic.total_traffic", lambda: "inErrors.total_ifInErrors", lambda: "outErrors.total_ifOutErrors")
        .as('cpu_used', 'tff_volume', 'inErrors', 'outErrors')
    |window()
        .periodCount(5)
        .everyCount(1)
        
var predictResult = predictData
    @predict()
        .predict_mode(predict_mode)
        .ensemble_condition(ensemble_condition)

var data = predictResult
    |groupBy(['agent_host', 'sys_name'])

var trigger = data
    |alert()
        .warn(lambda: ensemble_condition == 'or' AND "predict_status" == 'false' AND ("predict_kind" == 1 OR "predict_kind" == 2))
        .crit(lambda: ("predict_status" == 'true' AND ("predict_kind" == 4 OR "predict_kind" == 5 OR "predict_kind" == 6)) OR
            ("predict_status" == 'false' AND ((ensemble_condition == 'or' AND "predict_kind" == 3) OR ensemble_condition != 'or')))
        .stateChangesOnly(10m)
        .message(message)
        .id(name + '-{{.Group}}')
        .idTag('alertID')
        .levelTag('level')
        .messageField('message')
        .durationField('duration'){{if .Details}}.details(details){{end}}{{.AlertServices}}

var triggerData = trigger
    |eval(
        lambda: if(
            "predict_kind" == 1,
            'ML',
            if(
                "predict_kind" == 2,
                'DL',
                if(
                    "predict_kind" == 3,
                    'ML+DL',
                    if(
                        "predict_kind" == 4,
                        'In Error Packet',
                        if(
                            "predict_kind" == 5,
                            'Out Error Packet',
                            if("predict_kind" == 6, 'In/Out Error Packet', 'OK')
                        )
                    )
                )
            )
        ),
        lambda: "predict_kind"
    )
        .as('predict', 'value')
        .keep('duration', 'message', 'cpu_used', 'tff_volume', 'ml_epsilon', 'dl_threshold', 'inErrors', 'outErrors', 'predict', 'value')


triggerData
    |influxDBOut()
        .create()
        .database('Default')
        .retentionPolicy('autogen')
        .measurement('cloudhub_alerts')
        .tag('alertName', name)
        .tag('triggerType', 'anomaly_predict')
        
{{ if ne .OrgName "Default" }}        
triggerData
    |influxDBOut()
        .create()
        .database(db)
        .retentionPolicy('autogen')
        .measurement('cloudhub_alerts')
        .tag('alertName', name)
        .tag('triggerType', 'anomaly_predict')
{{ end }}        
{{ end }}
"""

