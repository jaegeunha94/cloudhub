app  = "tickscript"
id = "predict-task"
template = """
// This script is generated by CloudHub application, Do not edit!
// If you edit this script for test, it will be overwritten in the next generation.
{{ define "main"}}
var name = '__Anomaly Prediction {{.OrgName}}__'

var db = '{{.OrgName}}'

var rp = '{{.RetentionPolicy}}'

var predict_mode = '{{.PredictMode}}'

var ensemble_condition = '{{.PredictModeCondition}}'

var message = '{{.Message}}'

var details = '{{.Details}}'

var trffic = stream
    |from()
        .database(db)
        .retentionPolicy(rp)
        .measurement('snmp_nx')
        .groupBy(['agent_host', 'sys_name'])
        .where(lambda: isPresent("ifIndex"))
var tffUsed = trffic
    .where(lambda: ("ifDescr" =~ /Ethernet/))
var cpuUsed = stream
    |from()
        .database(db)
        .retentionPolicy('autogen')
        .measurement('snmp_nx')
        .groupBy(['agent_host', 'sys_name'])
        .where(lambda: isPresent("cpu1min"))
    |eval(lambda: "cpu1min")
        .as('cpu_used')
var inOctets = tffUsed
    |sum('ifHCInOctets')
        .as('total_ifHCInOctets')
    |derivative('total_ifHCInOctets')
        .unit(1s)
        .nonNegative()
var outOctets = tffUsed
    |sum('ifHCOutOctets')
        .as('total_ifHCOutOctets')
    |derivative('total_ifHCOutOctets')
        .unit(1s)
        .nonNegative()
var joined = inOctets
    |join(outOctets)
        .as('in', 'out')
        .tolerance(1s)
var tffVolume = joined
    |eval(lambda: "in.total_ifHCInOctets" + "out.total_ifHCOutOctets")
        .as('total_traffic')
var predictData = cpuUsed
    |join(tffVolume)
        .as('cpu', 'traffic')
        .tolerance(1s)
    |eval(lambda: "cpu.cpu_used", lambda: "traffic.total_traffic")
        .as('cpu_used', 'tff_volume')
    |window()
        .periodCount(5)
        .everyCount(1)
var predictResult = predictData
    @predict()
        .predict_mode(predict_mode)
        .ensemble_condition(ensemble_condition)

var data = predictResult
    |eval(lambda: "cpu_used", lambda: "tff_volume", lambda: "predict_status", lambda: "predict_kind")
        .as('cpu_used', 'tff_volume', 'predict_status', 'predict_kind')
    |groupBy(['agent_host', 'sys_name'])

var trigger = data
    |alert()
        .crit(lambda: "predict_status" == 'false')
        .stateChangesOnly()
        .message(message)
        .id(name + '-{{.Group}}')
        .idTag('alertID')
        .levelTag('level')
        .messageField('message')
        .durationField('duration'){{if .Details}}.details(details){{end}}{{.AlertServices}}

trigger
    |eval(lambda: if("predict_kind" == 1, 'ML', if("predict_kind" == 2, 'DL', if("predict_kind" == 3, 'ML+DL', 'OK'))), lambda: "predict_kind")
        .as('predict', 'value')
        .keep('duration', 'message', 'cpu_used', 'tff_volume', 'predict', 'value')
    |influxDBOut()
        .create()
        .database('Default')
        .retentionPolicy('autogen')
        .measurement('cloudhub_alerts')
        .tag('alertName', name)
        .tag('triggerType', 'anomaly_predict')
{{ if ne .OrgName "Default" }}        
trigger
    |eval(lambda: if("predict_kind" == 1, 'ML', if("predict_kind" == 2, 'DL', if("predict_kind" == 3, 'ML+DL', 'OK'))), lambda: "predict_kind")
        .as('predict', 'value')
        .keep('duration', 'message', 'cpu_used', 'tff_volume', 'predict', 'value')
    |influxDBOut()
        .create()
        .database(db)
        .retentionPolicy('autogen')
        .measurement('cloudhub_alerts')
        .tag('alertName', name)
        .tag('triggerType', 'anomaly_predict')
{{ end }}        
{{ end }}
"""

